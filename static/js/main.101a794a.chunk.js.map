{"version":3,"sources":["components/Clockify.js","components/Task/Task.js","components/Tag/Tag.js","components/Stopwatch/Stopwatch.js","components/Project/Project.js","components/Workspace/Workspace.js","components/EnterApiKey/EnterApiKey.js","components/App/App.js","serviceWorker.js","index.js"],"names":["apiToken","Task","event","this","props","onClick","stopPropagation","className","active","clickTask","name","React","Component","Tag","Stopwatch","state","hours","minutes","seconds","interval","setInterval","updateTimer","clearInterval","time","Date","now","start","padNull","num","setState","Math","floor","Project","project","tasks","map","task","renderTask","runningEntry","id","projectId","taskId","key","stopTask","startTask","workspace","tags","activeProject","tag","tagIds","indexOf","setTag","style","color","timeInterval","renderTasks","type","placeholder","value","description","onChange","typeTaskDescription","onBlur","updateTaskDescription","renderTags","timeEntry","billable","toISOString","apiRequest","workspaceId","method","headers","body","JSON","stringify","updateTask","currentTask","end","url","options","mode","fetch","then","response","status","parseJson","json","Workspace","updateRunningEntry","user","entries","length","target","index","splice","push","projects","stop","renderProjects","EnterApiKey","handleChange","bind","handleSubmit","preventDefault","onEnter","onSubmit","rel","href","App","workspaces","localStorage","getItem","onEnterApiKey","token","catch","setApiToken","setItem","loadWorkspaces","data","Promise","all","promise1","promise2","resolve","getWorkspaces","removeItem","window","location","reload","logout","input","renderSpaces","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.101a794a.chunk.js","sourcesContent":["let apiToken;\n\nexport function setApiToken(token) {\n  apiToken = token;\n  return apiRequest('/user')\n    .then(() => {\n      return apiToken;\n    })\n    .catch((response) => {\n      apiToken = null;\n      throw response;\n    });\n}\n\nexport function getWorkspaces() {\n  if (!apiToken) {\n    return Promise.resolve([]);\n  }\n  let workspaces;\n  return apiRequest('/workspaces')\n    .then(data => {\n      workspaces = data;\n\n      return Promise.all(data.map((workspace) => {\n        // get tags\n        const promise1 = apiRequest(`/workspaces/${workspace.id}/tags`)\n          .then((tags) => {\n            workspace.tags = tags;\n            return tags;\n          });\n\n        // get projects\n        const promise2 = apiRequest(`/workspaces/${workspace.id}/projects?archived=false`)\n          .then((projects) => {\n            workspace.projects = projects;\n\n            // get tasks\n            return Promise.all(projects.map((project) => {\n              const promise = apiRequest(`/workspaces/${workspace.id}/projects/${project.id}/tasks`);\n              return promise.then((tasks) => {\n                project.tasks = tasks;\n              });\n            }));\n          });\n\n        return Promise.all([promise1, promise2]);\n      }));\n    })\n    .then(() => {\n\n    })\n    .then(() => {\n      return workspaces;\n    });\n}\n\nexport function getRunningEntry(workspaceId) {\n  return apiRequest('/user').then((user) => {\n    return apiRequest(`/workspaces/${workspaceId}/user/${user.id}/time-entries?in-progress=true`)\n      .then((entries) => {\n        if (entries.length) {\n          return entries[0];\n        } else {\n          return null;\n        }\n      });\n  });\n}\n\nexport function startTask(project, task = null, tag = null) {\n  const timeEntry = {\n    //description: '',\n    tagIds: tag && [tag.id],\n    billable: project.billable,\n    taskId: task ? task.id : null,\n    projectId: project.id,\n    start: new Date().toISOString(),\n    //end: '2018-06-12T13:50:14.000Z',\n  };\n  return apiRequest(`/workspaces/${project.workspaceId}/time-entries`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(timeEntry),\n  });\n}\n\nexport function stopTask(currentTask) {\n  const timeEntry = {\n    description: currentTask.description,\n    tagIds: currentTask.tagIds,\n    billable: currentTask.billable,\n    taskId: currentTask.taskId,\n    projectId: currentTask.projectId,\n    start: currentTask.timeInterval.start,\n    end: new Date().toISOString(),\n  };\n\n  // PUT /workspaces/{workspaceId}/time-entries/{id}\n  return apiRequest(`/workspaces/${currentTask.workspaceId}/time-entries/${currentTask.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(timeEntry),\n  });\n}\n\nexport function updateTask(currentTask) {\n  const timeEntry = {\n    description: currentTask.description,\n    tagIds: currentTask.tagIds,\n    billable: currentTask.billable,\n    taskId: currentTask.taskId,\n    projectId: currentTask.projectId,\n    start: currentTask.timeInterval.start,\n    end: currentTask.timeInterval.end,\n  };\n\n  // PUT /workspaces/{workspaceId}/time-entries/{id}\n  return apiRequest(`/workspaces/${currentTask.workspaceId}/time-entries/${currentTask.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(timeEntry),\n  });\n}\n\nexport function apiRequest(url, options = {}) {\n  url = 'https://api.clockify.me/api/v1' + url;\n  if (!options.headers) {\n    options.headers = {};\n  }\n  options.headers['X-Api-Key'] = apiToken;\n  options.mode = 'cors';\n\n  return fetch(url, options)\n    .then((response) => {\n      if (response.status < 400) {\n        return response;\n      } else {\n        throw response;\n      }\n    })\n    .then(parseJson)\n}\n\nfunction parseJson(response) {\n  return response.json()\n}\n","import React from 'react';\nimport './Task.css';\n\nclass Task extends React.Component {\n  clickTask(event) {\n    this.props.onClick();\n    event.stopPropagation();\n  }\n\n  render() {\n    return (\n      <button className={'Task ' + (this.props.active ? 'active' : '')} onClick={(event) => this.clickTask(event)}>\n        {this.props.name}\n      </button>\n    );\n  }\n}\n\nexport default Task;\n","import React from 'react';\nimport './Tag.css';\n\nclass Tag extends React.Component {\n  clickTask(event) {\n    this.props.onClick();\n    event.stopPropagation();\n  }\n\n  render() {\n    return (\n      <button className={'Tag ' + (this.props.active && 'active')} onClick={(event) => this.clickTask(event)}>\n        {this.props.name}\n      </button>\n    );\n  }\n}\n\nexport default Tag;\n","import React from 'react';\n\nclass Stopwatch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hours: '0',\n      minutes: '00',\n      seconds: '00',\n    }\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.updateTimer(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  updateTimer() {\n    const time = (Date.now() - new Date(this.props.start)) / 1000;\n    this.setState({\n      hours: Math.floor(time / 60 / 60),\n      minutes: padNull(Math.floor(time / 60 % 60)),\n      seconds: padNull(Math.floor(time % 60)),\n    });\n\n    function padNull(num) {\n      return (num < 10) ? '0' + num : num;\n    }\n  }\n\n  render() {\n    return this.state.hours + ':' + this.state.minutes + ':' + this.state.seconds;\n  }\n}\n\nexport default Stopwatch;\n","import React from 'react';\nimport './Project.css';\nimport Task from \"../Task/Task\";\nimport Tag from \"../Tag/Tag\";\nimport Stopwatch from \"../Stopwatch/Stopwatch\";\n\nclass Project extends React.Component {\n\n  renderTasks() {\n    if (!this.props.project || !this.props.project.tasks) {\n      return '';\n    }\n    return this.props.project.tasks.map((task) => this.renderTask(task));\n  }\n\n  renderTask(task) {\n    const active = this.props.runningEntry\n      && this.props.project.id === this.props.runningEntry.projectId\n      && (this.props.runningEntry.taskId === task.id || (this.props.runningEntry.taskId == null && task.id === 'start'));\n    return (\n      <Task\n        key={task.id}\n        name={task.name}\n        active={active}\n        onClick={() => active ? this.props.stopTask() : this.props.startTask(this.props.project, task)}\n      />\n    );\n  }\n\n  renderTags() {\n    if (!this.props.workspace || !this.props.workspace.tags) {\n      return '';\n    }\n    const activeProject = this.props.runningEntry && this.props.runningEntry.projectId === this.props.project.id;\n    return this.props.workspace.tags.map((tag) => {\n      const active = activeProject && this.props.runningEntry && this.props.runningEntry.tagIds && this.props.runningEntry.tagIds.indexOf(tag.id) !== -1;\n      return (\n        <Tag\n          key={tag.id}\n          name={tag.name}\n          active={active}\n          onClick={(event) => {this.props.setTag(this.props.project, tag)}}\n        />\n      )\n    });\n  }\n\n  render() {\n    const active = this.props.runningEntry && this.props.runningEntry.projectId === this.props.project.id;\n    return (\n      <div className={'Project'}>\n        <div\n          className={'Project-body ' + (active ? 'active' : '')}\n          style={{'backgroundColor': this.props.project.color}}\n          onClick={() => active ? this.props.stopTask() : this.props.startTask(this.props.project, this.props.project.tasks[0])}\n        >\n          <div style={{'display': 'flex'}}>\n            <h4>{this.props.project.name}</h4>\n            <time>{active && <Stopwatch start={this.props.runningEntry.timeInterval.start}/>}</time>\n          </div>\n          <div className=\"Project-tasks\">\n            <button\n              className={'Task'}\n              onClick={() => active ? this.props.stopTask() : this.props.startTask(this.props.project, {id:'start'})}\n            >\n              {this.props.runningEntry ? (active ? 'Stop' : 'Switch') : 'Start'}\n            </button>\n            {this.renderTasks()}\n          </div>\n          { active && (\n            <div className=\"Project-description\">\n              <input\n                type=\"text\"\n                placeholder=\"Description\"\n                value={this.props.runningEntry.description || ''}\n                onChange={(event) => this.props.typeTaskDescription(event)}\n                onBlur={(event) => this.props.updateTaskDescription(event)}\n                onClick={(event) => event.stopPropagation()}\n              />\n            </div>\n          )}\n          <div className=\"Project-tags\">\n            {this.renderTags()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Project;\n","import React from 'react';\nimport './Workspace.css';\nimport Project from \"../Project/Project\";\nimport {getRunningEntry, startTask, stopTask, updateTask} from \"../Clockify\";\n\nclass Workspace extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      runningEntry: null\n    };\n  }\n\n  componentDidMount() {\n    this.updateRunningEntry();\n    this.interval = setInterval(() => this.updateRunningEntry(), 30 * 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  updateRunningEntry() {\n    getRunningEntry(this.props.workspace.id)\n      .then((runningEntry) => {\n        this.setState({runningEntry: runningEntry});\n      });\n  }\n\n  start(project, task = null, tag = null) {\n    this.setState({runningEntry: null});\n    task = (task && task.id === 'start') ? null : task;\n    startTask(project, task, tag)\n      .then((runningEntry) => {\n        this.setState({runningEntry: runningEntry});\n      });\n  }\n\n  stop() {\n    this.setState({runningEntry: null});\n    stopTask(this.state.runningEntry);\n  }\n\n  typeTaskDescription(event) {\n    const runningEntry = this.state.runningEntry;\n    runningEntry.description = event.target.value;\n    this.setState({runningEntry: runningEntry});\n  }\n\n  updateTaskDescription(event) {\n    updateTask(this.state.runningEntry);\n  }\n\n  setTag(project, tag) {\n    if (this.state.runningEntry && this.state.runningEntry.projectId === project.id) {\n      // running task in same project\n      const runningEntry = this.state.runningEntry;\n      if (!runningEntry.tagIds) {\n        runningEntry.tagIds = [];\n      }\n      // > add/remove tag\n      const index = runningEntry.tagIds.indexOf(tag.id);\n      if (index !== -1) {\n        runningEntry.tagIds.splice(index, 1);\n      } else {\n        runningEntry.tagIds.push(tag.id);\n      }\n      this.setState({runningEntry: runningEntry});\n      updateTask(runningEntry);\n    } else {\n      // new task with tag\n      this.start(project, null, tag);\n    }\n  }\n\n  renderProjects() {\n    if (!this.props.workspace || !this.props.workspace.projects) {\n      return '';\n    }\n    return this.props.workspace.projects.map((project) => {\n      return <Project\n        key={project.id}\n        workspace={this.props.workspace}\n        project={project}\n        runningEntry={this.state.runningEntry}\n        startTask={(project, task) => this.start(project, task)}\n        stopTask={() => this.stop()}\n        updateTaskDescription={(event) => this.updateTaskDescription(event)}\n        typeTaskDescription={(event) => this.typeTaskDescription(event)}\n        setTag={(project, tag) => this.setTag(project, tag)}\n      />\n    });\n  }\n\n  // Workspace: {this.props.workspace.name}\n  render() {\n    return (\n      <div className=\"Workspace\">\n        <div className=\"Workspace-title\">Workspace: {this.props.workspace.name}</div>\n        <div className=\"projects\">\n          {this.renderProjects()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Workspace;\n","import React from 'react';\nimport \"./EnterApiKey.css\";\n\nclass EnterApiKey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.onEnter(this.state.value);\n  }\n\n  render() {\n    return (\n      <form className={\"EnterApiKey\"} onSubmit={this.handleSubmit}>\n        <label>\n          <p>Please enter your Clockify API Key:</p>\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder={\"API Key\"} />\n          <p className={\"right\"}><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://clockify.me/user/settings\">Get it here.</a></p>\n        </label>\n        <input className={\"submit\"} type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default EnterApiKey;\n","import React from 'react';\nimport './App.css';\nimport Workspace from \"../Workspace/Workspace\";\nimport EnterApiKey from \"../EnterApiKey/EnterApiKey\";\nimport {getWorkspaces, setApiToken} from \"../Clockify\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      workspaces: [],\n      apiToken: localStorage.getItem('ClockifyApiToken'),\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.apiToken) {\n      this.onEnterApiKey(this.state.apiToken);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  onEnterApiKey(token) {\n    setApiToken(token)\n      .then(() => {\n        localStorage.setItem('ClockifyApiToken', token);\n        this.setState({\n          apiToken: token,\n        });\n        this.loadWorkspaces();\n        this.interval = setInterval(() => this.loadWorkspaces(), 10*60*1000);\n      })\n      .catch(() => {});\n  }\n\n  loadWorkspaces() {\n    return getWorkspaces()\n      .then((workspaces) => {\n        this.setState({workspaces: workspaces});\n        return workspaces;\n      });\n  }\n\n  logout() {\n    localStorage.removeItem('ClockifyApiToken');\n    window.location.reload();\n  }\n\n  renderSpaces() {\n    return this.state.workspaces.map((workspace) => {\n      return <Workspace key={workspace.id} workspace={workspace} />\n    });\n  }\n\n  render() {\n    const logout = <button className=\"App-logout\" onClick={this.logout}>Logout</button>;\n\n    const input = (\n      <EnterApiKey onEnter={(token) => this.onEnterApiKey(token)}/>\n    );\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Clockify Switch</h1>\n\n          {this.state.apiToken && this.renderSpaces()}\n          {this.state.apiToken && logout}\n          {!this.state.apiToken && input}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}