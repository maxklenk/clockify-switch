{"version":3,"sources":["components/Clockify.tsx","components/Task/Task.tsx","components/Tag/Tag.tsx","components/Stopwatch/Stopwatch.tsx","components/Project/Project.tsx","components/Workspace/Workspace.tsx","components/EnterApiKey/EnterApiKey.tsx","components/App/App.tsx","serviceWorker.tsx","index.tsx"],"names":["apiToken","Task","event","this","props","onClick","stopPropagation","className","active","clickTask","name","React","Component","Tag","Stopwatch","interval","state","hours","minutes","seconds","setInterval","updateTimer","clearInterval","startTime","Date","start","time","now","padNull","num","toString","setState","Math","floor","Project","project","tasks","map","task","renderTask","runningEntry","id","projectId","taskId","key","stopTask","startTask","workspace","tags","activeProject","tag","tagIds","indexOf","setTag","style","color","timeInterval","renderTasks","type","placeholder","value","description","onChange","typeTaskDescription","onBlur","updateTaskDescription","renderTags","timeEntry","billable","toISOString","apiRequest","workspaceId","method","headers","body","JSON","stringify","updateTask","currentTimeEntry","end","url","options","mode","fetch","then","response","status","parseJson","json","Workspace","updateRunningEntry","user","entries","length","target","index","splice","push","projects","stop","renderProjects","EnterApiKey","preventDefault","onEnter","onSubmit","handleSubmit","handleChange","rel","href","App","workspaces","localStorage","getItem","onEnterApiKey","token","catch","setApiToken","setItem","loadWorkspaces","data","Promise","all","promise1","promise2","resolve","getWorkspaces","removeItem","window","location","reload","logout","input","renderSpaces","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.c9fd32ff.chunk.js","sourcesContent":["export type ClockifyTag = any;\nexport type ClockifyTask = any;\nexport type ClockifyProject = any;\nexport type ClockifyWorkspace = any;\nexport type ClockifyTimeEntry = any;\nexport type ClockifyUser = any;\n\nlet apiToken: string | null;\n\nexport function setApiToken(token: string) {\n    apiToken = token;\n    return apiRequest('/user')\n        .then(() => {\n            return apiToken;\n        })\n        .catch((response) => {\n            apiToken = null;\n            throw response;\n        });\n}\n\nexport function getWorkspaces() {\n    if (!apiToken) {\n        return Promise.resolve([]);\n    }\n    let workspaces: ClockifyWorkspace;\n    return apiRequest('/workspaces')\n        .then(data => {\n            workspaces = data;\n\n            return Promise.all(data.map((workspace: ClockifyWorkspace) => {\n                // get tags\n                const promise1 = apiRequest(`/workspaces/${workspace.id}/tags`)\n                    .then((tags) => {\n                        workspace.tags = tags;\n                        return tags;\n                    });\n\n                // get projects\n                const promise2 = apiRequest(`/workspaces/${workspace.id}/projects?archived=false`)\n                    .then((projects) => {\n                        workspace.projects = projects;\n\n                        // get tasks\n                        return Promise.all(projects.map((project: ClockifyProject) => {\n                            const promise = apiRequest(`/workspaces/${workspace.id}/projects/${project.id}/tasks`);\n                            return promise.then((tasks) => {\n                                project.tasks = tasks;\n                            });\n                        }));\n                    });\n\n                return Promise.all([promise1, promise2]);\n            }));\n        })\n        .then(() => {\n\n        })\n        .then(() => {\n            return workspaces;\n        });\n}\n\nexport function getRunningEntry(workspaceId: string) {\n    return apiRequest('/user').then((user: ClockifyUser) => {\n        return apiRequest(`/workspaces/${workspaceId}/user/${user.id}/time-entries?in-progress=true`)\n            .then((entries) => {\n                if (entries.length) {\n                    return entries[0];\n                } else {\n                    return null;\n                }\n            });\n    });\n}\n\nexport function startTask(project: ClockifyProject, task: ClockifyTask | null = null, tag: ClockifyTag | null = null) {\n    const timeEntry = {\n        //description: '',\n        tagIds: tag && [tag.id],\n        billable: project.billable,\n        taskId: task ? task.id : null,\n        projectId: project.id,\n        start: new Date().toISOString(),\n        //end: '2018-06-12T13:50:14.000Z',\n    };\n    return apiRequest(`/workspaces/${project.workspaceId}/time-entries`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(timeEntry),\n    });\n}\n\nexport function stopTask(currentTimeEntry: ClockifyTimeEntry) {\n    const timeEntry = {\n        description: currentTimeEntry.description,\n        tagIds: currentTimeEntry.tagIds,\n        billable: currentTimeEntry.billable,\n        taskId: currentTimeEntry.taskId,\n        projectId: currentTimeEntry.projectId,\n        start: currentTimeEntry.timeInterval.start,\n        end: new Date().toISOString(),\n    };\n\n    // PUT /workspaces/{workspaceId}/time-entries/{id}\n    return apiRequest(`/workspaces/${currentTimeEntry.workspaceId}/time-entries/${currentTimeEntry.id}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(timeEntry),\n    });\n}\n\nexport function updateTask(currentTimeEntry: ClockifyTimeEntry) {\n    const timeEntry = {\n        description: currentTimeEntry.description,\n        tagIds: currentTimeEntry.tagIds,\n        billable: currentTimeEntry.billable,\n        taskId: currentTimeEntry.taskId,\n        projectId: currentTimeEntry.projectId,\n        start: currentTimeEntry.timeInterval.start,\n        end: currentTimeEntry.timeInterval.end,\n    };\n\n    // PUT /workspaces/{workspaceId}/time-entries/{id}\n    return apiRequest(`/workspaces/${currentTimeEntry.workspaceId}/time-entries/${currentTimeEntry.id}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(timeEntry),\n    });\n}\n\nexport function apiRequest(url: string, options: any = {}) {\n    url = 'https://api.clockify.me/api/v1' + url;\n    if (!options.headers) {\n        options.headers = {};\n    }\n    options.headers['X-Api-Key'] = apiToken;\n    options.mode = 'cors';\n\n    return fetch(url, options)\n        .then((response) => {\n            if (response.status < 400) {\n                return response;\n            } else {\n                throw response;\n            }\n        })\n        .then(parseJson)\n}\n\nfunction parseJson(response: Response) {\n    return response.json()\n}\n","import React from 'react';\nimport './Task.css';\n\ntype TaskProps = {\n    onClick: Function;\n    active: boolean;\n    name: string;\n}\ntype TaskState = {}\n\nclass Task extends React.Component<TaskProps, TaskState> {\n    clickTask(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        this.props.onClick();\n        event.stopPropagation();\n    }\n\n    render() {\n        return (\n            <button className={'Task ' + (this.props.active && 'active')} onClick={(event) => this.clickTask(event)}>\n                {this.props.name}\n            </button>\n        );\n    }\n}\n\nexport default Task;\n","import React from 'react';\nimport './Tag.css';\n\ntype TagProps = {\n    name: string;\n    onClick: Function;\n    active: boolean;\n}\ntype TagState = {}\n\nclass Tag extends React.Component<TagProps, TagState> {\n    clickTask(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n        this.props.onClick();\n        event.stopPropagation();\n    }\n\n    render() {\n        return (\n            <button className={'Tag ' + (this.props.active && 'active')} onClick={(event) => this.clickTask(event)}>\n                {this.props.name}\n            </button>\n        );\n    }\n}\n\nexport default Tag;\n","import React from 'react';\n\ntype StopwatchProps = {\n    start: string;\n}\ntype StopwatchState = {\n    hours: string;\n    minutes: string;\n    seconds: string;\n}\n\nclass Stopwatch extends React.Component<StopwatchProps, StopwatchState> {\n    interval: NodeJS.Timeout | null = null;\n\n    constructor(props: StopwatchProps) {\n        super(props);\n\n        this.state = {\n            hours: '0',\n            minutes: '00',\n            seconds: '00',\n        }\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.updateTimer(), 1000);\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    updateTimer() {\n        const startTime = +new Date(this.props.start);\n        const time = (Date.now() - startTime) / 1000;\n        this.setState({\n            hours: Math.floor(time / 60 / 60).toString(),\n            minutes: padNull(Math.floor(time / 60 % 60)),\n            seconds: padNull(Math.floor(time % 60)),\n        });\n\n        function padNull(num: number): string {\n            return (num < 10) ? '0' + num : num.toString(10);\n        }\n    }\n\n    render() {\n        return this.state.hours + ':' + this.state.minutes + ':' + this.state.seconds;\n    }\n}\n\nexport default Stopwatch;\n","import React from 'react';\nimport './Project.css';\nimport Task from \"../Task/Task\";\nimport Tag from \"../Tag/Tag\";\nimport Stopwatch from \"../Stopwatch/Stopwatch\";\nimport {ClockifyProject, ClockifyTag, ClockifyTask, ClockifyTimeEntry, ClockifyWorkspace} from \"../Clockify\";\n\ntype ProjectProps = {\n    workspace: ClockifyWorkspace;\n    project: ClockifyProject;\n    runningEntry: ClockifyTimeEntry | null;\n    stopTask: Function;\n    startTask: Function;\n    typeTaskDescription: Function;\n    updateTaskDescription: Function;\n    setTag: Function;\n}\ntype ProjectState = {}\n\nclass Project extends React.Component<ProjectProps, ProjectState> {\n\n    renderTasks() {\n        if (!this.props.project || !this.props.project.tasks) {\n            return '';\n        }\n        return this.props.project.tasks.map((task: any) => this.renderTask(task));\n    }\n\n    renderTask(task: ClockifyTask) {\n        const active = this.props.runningEntry\n            && this.props.project.id === this.props.runningEntry.projectId\n            && (this.props.runningEntry.taskId === task.id || (this.props.runningEntry.taskId == null && task.id === 'start'));\n        return (\n            <Task\n                key={task.id}\n                name={task.name}\n                active={active}\n                onClick={() => active ? this.props.stopTask() : this.props.startTask(this.props.project, task)}\n            />\n        );\n    }\n\n    renderTags() {\n        if (!this.props.workspace || !this.props.workspace.tags) {\n            return '';\n        }\n        const activeProject = this.props.runningEntry && this.props.runningEntry.projectId === this.props.project.id;\n        return this.props.workspace.tags.map((tag: ClockifyTag) => {\n            const active = activeProject && this.props.runningEntry && this.props.runningEntry.tagIds && this.props.runningEntry.tagIds.indexOf(tag.id) !== -1;\n            return (\n                <Tag\n                    key={tag.id}\n                    name={tag.name}\n                    active={active}\n                    onClick={() => {\n                        this.props.setTag(this.props.project, tag)\n                    }}\n                />\n            )\n        });\n    }\n\n    render() {\n        const active = this.props.runningEntry && this.props.runningEntry.projectId === this.props.project.id;\n        return (\n            <div className={'Project'}>\n                <div\n                    className={'Project-body ' + (active ? 'active' : '')}\n                    style={{'backgroundColor': this.props.project.color}}\n                    onClick={() => active ? this.props.stopTask() : this.props.startTask(this.props.project, this.props.project.tasks[0])}\n                >\n                    <div style={{'display': 'flex'}}>\n                        <h4>{this.props.project.name}</h4>\n                        <time>{active && <Stopwatch start={this.props.runningEntry.timeInterval.start}/>}</time>\n                    </div>\n                    <div className=\"Project-tasks\">\n                        <button\n                            className={'Task'}\n                            onClick={() => active ? this.props.stopTask() : this.props.startTask(this.props.project, {id: 'start'})}\n                        >\n                            {this.props.runningEntry ? (active ? 'Stop' : 'Switch') : 'Start'}\n                        </button>\n                        {this.renderTasks()}\n                    </div>\n                    {active && (\n                        <div className=\"Project-description\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"Description\"\n                                value={this.props.runningEntry.description || ''}\n                                onChange={(event) => this.props.typeTaskDescription(event)}\n                                onBlur={(event) => this.props.updateTaskDescription(event)}\n                                onClick={(event) => event.stopPropagation()}\n                            />\n                        </div>\n                    )}\n                    <div className=\"Project-tags\">\n                        {this.renderTags()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Project;\n","import React from 'react';\nimport './Workspace.css';\nimport Project from \"../Project/Project\";\nimport {ClockifyProject, ClockifyTag, ClockifyTask, ClockifyTimeEntry, ClockifyWorkspace, getRunningEntry, startTask, stopTask, updateTask} from \"../Clockify\";\n\ntype WorkspaceProps = {\n    workspace: ClockifyWorkspace;\n}\ntype WorkspaceState = {\n    runningEntry: ClockifyTimeEntry;\n}\n\nclass Workspace extends React.Component<WorkspaceProps, WorkspaceState> {\n    interval: NodeJS.Timeout | undefined;\n    state: WorkspaceState = {\n        runningEntry: null\n    };\n\n    componentDidMount() {\n        this.updateRunningEntry();\n        this.interval = setInterval(() => this.updateRunningEntry(), 30 * 1000);\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    updateRunningEntry() {\n        getRunningEntry(this.props.workspace.id)\n            .then((runningEntry) => {\n                this.setState({runningEntry: runningEntry});\n            });\n    }\n\n    start(project:ClockifyProject, task:ClockifyTask|null = null, tag:ClockifyTag|null = null) {\n        this.setState({runningEntry: null});\n        task = (task && task.id === 'start') ? null : task;\n        startTask(project, task, tag)\n            .then((runningEntry) => {\n                this.setState({runningEntry: runningEntry});\n            });\n    }\n\n    stop() {\n        this.setState({runningEntry: null});\n        stopTask(this.state.runningEntry);\n    }\n\n    typeTaskDescription(event:React.ChangeEvent<HTMLInputElement>) {\n        const runningEntry = this.state.runningEntry;\n        runningEntry.description = event.target.value;\n        this.setState({runningEntry: runningEntry});\n    }\n\n    updateTaskDescription() {\n        updateTask(this.state.runningEntry);\n    }\n\n    setTag(project:any, tag:any) {\n        if (this.state.runningEntry && this.state.runningEntry.projectId === project.id) {\n            // running task in same project\n            const runningEntry = this.state.runningEntry;\n            if (!runningEntry.tagIds) {\n                runningEntry.tagIds = [];\n            }\n            // > add/remove tag\n            const index = runningEntry.tagIds.indexOf(tag.id);\n            if (index !== -1) {\n                runningEntry.tagIds.splice(index, 1);\n            } else {\n                runningEntry.tagIds.push(tag.id);\n            }\n            this.setState({runningEntry: runningEntry});\n            updateTask(runningEntry);\n        } else {\n            // new task with tag\n            this.start(project, null, tag);\n        }\n    }\n\n    renderProjects() {\n        if (!this.props.workspace || !this.props.workspace.projects) {\n            return '';\n        }\n        return this.props.workspace.projects.map((project:ClockifyProject) => {\n            return <Project\n                key={project.id}\n                workspace={this.props.workspace}\n                project={project}\n                runningEntry={this.state.runningEntry}\n                startTask={(project:ClockifyProject, task:ClockifyTask) => this.start(project, task)}\n                stopTask={() => this.stop()}\n                updateTaskDescription={() => this.updateTaskDescription()}\n                typeTaskDescription={(event:React.ChangeEvent<HTMLInputElement>) => this.typeTaskDescription(event)}\n                setTag={(project:ClockifyProject, tag:ClockifyTag) => this.setTag(project, tag)}\n            />\n        });\n    }\n\n    // Workspace: {this.props.workspace.name}\n    render() {\n        return (\n            <div className=\"Workspace\">\n                <div className=\"Workspace-title\">Workspace: {this.props.workspace.name}</div>\n                <div className=\"projects\">\n                    {this.renderProjects()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Workspace;\n","import React from 'react';\nimport \"./EnterApiKey.css\";\n\ntype EnterApiKeyProps = {\n    onEnter: Function;\n}\ntype EnterApiKeyState = {\n    value: string;\n}\n\nclass EnterApiKey extends React.Component<EnterApiKeyProps, EnterApiKeyState> {\n    constructor(props: EnterApiKeyProps) {\n        super(props);\n        this.state = {\n            value: ''\n        };\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        this.props.onEnter(this.state.value);\n    }\n\n    render() {\n        return (\n            <form className={\"EnterApiKey\"} onSubmit={(event) => this.handleSubmit(event)}>\n                <label>\n                    <p>Please enter your Clockify API Key:</p>\n                    <input type=\"text\" value={this.state.value} onChange={(event) => this.handleChange(event)} placeholder={\"API Key\"}/>\n                    <p className={\"right\"}><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://clockify.me/user/settings\">Get it here.</a></p>\n                </label>\n                <input className={\"submit\"} type=\"submit\" value=\"Submit\"/>\n            </form>\n        );\n    }\n}\n\nexport default EnterApiKey;\n","import React from 'react';\nimport './App.css';\nimport Workspace from \"../Workspace/Workspace\";\nimport EnterApiKey from \"../EnterApiKey/EnterApiKey\";\nimport {getWorkspaces, setApiToken} from \"../Clockify\";\n\ntype AppProps = {}\ntype AppState = {\n    workspaces: any;\n    apiToken: string | null;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    interval: NodeJS.Timeout | undefined;\n    state = {\n        workspaces: [],\n        apiToken: localStorage.getItem('ClockifyApiToken'),\n    };\n\n    componentDidMount() {\n        if (this.state.apiToken) {\n            this.onEnterApiKey(this.state.apiToken);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    onEnterApiKey(token: string) {\n        setApiToken(token)\n            .then(() => {\n                localStorage.setItem('ClockifyApiToken', token);\n                this.setState({\n                    apiToken: token,\n                });\n                this.loadWorkspaces();\n                this.interval = setInterval(() => this.loadWorkspaces(), 10 * 60 * 1000);\n            })\n            .catch(() => {\n            });\n    }\n\n    loadWorkspaces() {\n        return getWorkspaces()\n            .then((workspaces) => {\n                this.setState({workspaces: workspaces});\n                return workspaces;\n            });\n    }\n\n    logout() {\n        localStorage.removeItem('ClockifyApiToken');\n        window.location.reload();\n    }\n\n    renderSpaces() {\n        return this.state.workspaces.map((workspace: any) => {\n            return <Workspace key={workspace.id} workspace={workspace}/>\n        });\n    }\n\n    render() {\n        const logout = <button className=\"App-logout\" onClick={this.logout}>Logout</button>;\n\n        const input = (\n            <EnterApiKey onEnter={(token: string) => this.onEnterApiKey(token)}/>\n        );\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>Clockify Switch</h1>\n\n                    {this.state.apiToken && this.renderSpaces()}\n                    {this.state.apiToken && logout}\n                    {!this.state.apiToken && input}\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config:any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl:string, config:any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl:string, config:any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}