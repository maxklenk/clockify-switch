{"version":3,"sources":["components/Clockify.js","components/Task/Task.js","components/Stopwatch/Stopwatch.js","components/Project/Project.js","components/Workspace/Workspace.js","components/EnterApiKey/EnterApiKey.js","components/App/App.js","serviceWorker.js","index.js"],"names":["apiToken","Task","event","this","props","onClick","stopPropagation","className","active","clickTask","name","React","Component","Stopwatch","state","hours","minutes","seconds","interval","setInterval","updateTimer","clearInterval","time","Date","now","start","padNull","num","setState","Math","floor","Project","project","tasks","map","task","renderTask","runningEntry","id","projectId","taskId","key","stopTask","startTask","style","color","timeInterval","renderTasks","type","placeholder","value","description","onChange","updateTaskDescription","apiRequest","url","options","headers","mode","fetch","then","response","status","parseJson","json","Workspace","updateRunningEntry","workspaceId","workspace","user","entries","length","timeEntry","toISOString","method","body","JSON","stringify","currentTask","billable","target","editTaskDescription","projects","stop","renderProjects","EnterApiKey","handleChange","bind","handleSubmit","preventDefault","onEnter","onSubmit","rel","href","App","workspaces","localStorage","getItem","onEnterApiKey","token","catch","setApiToken","setItem","loadWorkspaces","data","Promise","all","unshift","resolve","getWorkspaces","removeItem","window","location","reload","logout","input","renderSpaces","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.6c6c88f4.chunk.js","sourcesContent":["let apiToken;\n\nexport function setApiToken(token) {\n  apiToken = token;\n  return apiRequest('/user')\n    .then(() => {\n      return apiToken;\n    })\n    .catch((response) => {\n      apiToken = null;\n      throw response;\n    });\n}\n\nexport function getWorkspaces() {\n  if (!apiToken) {\n    return Promise.resolve([]);\n  }\n  let workspaces;\n  return apiRequest('/workspaces')\n    .then(data => {\n      workspaces = data;\n\n      // get projects\n      return Promise.all(data.map((workspace) => {\n        const promise = apiRequest(`/workspaces/${workspace.id}/projects?archived=false`);\n        return promise.then((projects) => {\n          workspace.projects = projects;\n\n          // get tasks\n          return Promise.all(projects.map((project) => {\n            const promise = apiRequest(`/workspaces/${workspace.id}/projects/${project.id}/tasks`);\n            return promise.then((tasks) => {\n              project.tasks = tasks;\n              const startTask = {\n                id: 'start',\n                name: 'Start',\n                active: false,\n              };\n              project.tasks.unshift(startTask);\n            });\n          }));\n        });\n      }));\n    })\n    .then(() => {\n      return workspaces;\n    });\n}\n\nexport function getRunningEntry(workspaceId) {\n  return apiRequest('/user').then((user) => {\n    return apiRequest(`/workspaces/${workspaceId}/user/${user.id}/time-entries?in-progress=true`)\n      .then((entries) => {\n        if (entries.length) {\n          return entries[0];\n        } else {\n          return null;\n        }\n      });\n  });\n}\n\nexport function startTask(project, task = null) {\n  const timeEntry = {\n    \"start\": new Date().toISOString(),\n    //\"billable\": \"true\", // default\n    //\"description\": \"Writing documentation\",\n    \"projectId\": project.id,\n    \"taskId\": task ? task.id : null,\n    //\"end\": \"2018-06-12T13:50:14.000Z\",\n  };\n  return apiRequest(`/workspaces/${project.workspaceId}/time-entries`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(timeEntry),\n  });\n}\n\nexport function stopTask(currentTask) {\n  const timeEntry = {\n    \"billable\": currentTask.billable,\n    \"projectId\": currentTask.projectId,\n    \"taskId\": currentTask.taskId,\n    \"start\": currentTask.timeInterval.start,\n    \"end\": new Date().toISOString(),\n  };\n\n  // PUT /workspaces/{workspaceId}/time-entries/{id}\n  return apiRequest(`/workspaces/${currentTask.workspaceId}/time-entries/${currentTask.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(timeEntry),\n  });\n}\n\nexport function editTaskDescription(currentTask) {\n  const timeEntry = {\n    \"billable\": currentTask.billable,\n    \"projectId\": currentTask.projectId,\n    \"taskId\": currentTask.taskId,\n    \"start\": currentTask.timeInterval.start,\n    \"description\": currentTask.description,\n  };\n\n  // PUT /workspaces/{workspaceId}/time-entries/{id}\n  return apiRequest(`/workspaces/${currentTask.workspaceId}/time-entries/${currentTask.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(timeEntry),\n  });\n}\n\nexport function apiRequest(url, options = {}) {\n  url = 'https://api.clockify.me/api/v1' + url;\n  if (!options.headers) {\n    options.headers = {};\n  }\n  options.headers['X-Api-Key'] = apiToken;\n  options.mode = 'cors';\n\n  return fetch(url, options)\n    .then((response) => {\n      if (response.status < 400) {\n        return response;\n      } else {\n        throw response;\n      }\n    })\n    .then(parseJson)\n}\n\nfunction parseJson(response) {\n  return response.json()\n}\n","import React from 'react';\nimport './Task.css';\n\nclass Task extends React.Component {\n  clickTask(event) {\n    this.props.onClick();\n    event.stopPropagation();\n  }\n\n  render() {\n    return (\n      <button className={'Task ' + (this.props.active ? 'active' : '')} onClick={(event) => this.clickTask(event)}>\n        {this.props.name}\n      </button>\n    );\n  }\n}\n\nexport default Task;\n","import React from 'react';\n\nclass Stopwatch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hours: '0',\n      minutes: '00',\n      seconds: '00',\n    }\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.updateTimer(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  updateTimer() {\n    const time = (Date.now() - new Date(this.props.start)) / 1000;\n    this.setState({\n      hours: Math.floor(time / 60 / 60),\n      minutes: padNull(Math.floor(time / 60 % 60)),\n      seconds: padNull(Math.floor(time % 60)),\n    });\n\n    function padNull(num) {\n      return (num < 10) ? '0' + num : num;\n    }\n  }\n\n  render() {\n    return this.state.hours + ':' + this.state.minutes + ':' + this.state.seconds;\n  }\n}\n\nexport default Stopwatch;\n","import React from 'react';\nimport './Project.css';\nimport Task from \"../Task/Task\";\nimport Stopwatch from \"../Stopwatch/Stopwatch\";\n\nclass Project extends React.Component {\n\n  renderTasks() {\n    if (!this.props.project || !this.props.project.tasks) {\n      return '';\n    }\n    return this.props.project.tasks.map((task) => this.renderTask(task));\n  }\n\n  renderTask(task) {\n    const active = this.props.runningEntry\n      && this.props.project.id === this.props.runningEntry.projectId\n      && (this.props.runningEntry.taskId === task.id || (this.props.runningEntry.taskId == null && task.id === 'start'));\n    return (\n      <Task\n        key={task.id}\n        name={task.name}\n        active={active}\n        onClick={() => active ? this.props.stopTask() : this.props.startTask(this.props.project, task)}\n      />\n    );\n  }\n\n  render() {\n    const active = this.props.runningEntry && this.props.runningEntry.projectId === this.props.project.id;\n    return (\n      <div className={'Project'}>\n        <div\n          className={'Project-body ' + (active ? 'active' : '')}\n          style={{'backgroundColor': this.props.project.color}}\n          onClick={() => active ? this.props.stopTask() : this.props.startTask(this.props.project, this.props.project.tasks[0])}\n        >\n          <div style={{'display': 'flex'}}>\n            <h4>{this.props.project.name}</h4>\n            <time>{active && <Stopwatch start={this.props.runningEntry.timeInterval.start}/>}</time>\n          </div>\n          <div className=\"tasks\">\n            {this.renderTasks()}\n          </div>\n          { active && (\n            <div className=\"Project-description\">\n              <input\n                type=\"text\"\n                placeholder=\"Description\"\n                value={this.props.runningEntry.description || ''}\n                onChange={this.props.updateTaskDescription}\n                onClick={(event) => event.stopPropagation()}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Project;\n","import React from 'react';\nimport './Workspace.css';\nimport Project from \"../Project/Project\";\nimport {getRunningEntry, startTask, stopTask, editTaskDescription} from \"../Clockify\";\n\nclass Workspace extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      runningEntry: null\n    };\n  }\n\n  componentDidMount() {\n    this.updateRunningEntry();\n    this.interval = setInterval(() => this.updateRunningEntry(), 30*1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  updateRunningEntry() {\n    getRunningEntry(this.props.workspace.id)\n      .then((runningEntry) => {\n        this.setState({runningEntry: runningEntry});\n      });\n  }\n\n  start(project, task) {\n    this.setState({runningEntry: null});\n    task = task.id === 'start' ? null : task;\n    startTask(project, task)\n      .then((runningEntry) => {\n        this.setState({runningEntry: runningEntry});\n      });\n  }\n\n  stop() {\n    this.setState({runningEntry: null});\n    stopTask(this.state.runningEntry);\n  }\n\n  updateTaskDescription(event) {\n    const runningEntry = this.state.runningEntry;\n    runningEntry.description = event.target.value;\n    this.setState({runningEntry: runningEntry});\n    editTaskDescription(runningEntry);\n  }\n\n  renderProjects() {\n    if (!this.props.workspace || !this.props.workspace.projects) {\n      return '';\n    }\n    return this.props.workspace.projects.map((project) => {\n      return <Project\n        key={project.id}\n        project={project}\n        runningEntry={this.state.runningEntry}\n        startTask={(project, task) => this.start(project, task)}\n        stopTask={() => this.stop()}\n        updateTaskDescription={(event) => this.updateTaskDescription(event)}\n      />\n    });\n  }\n\n  // Workspace: {this.props.workspace.name}\n  render() {\n    return (\n      <div className=\"Workspace\">\n        <div className=\"Workspace-title\">Workspace: {this.props.workspace.name}</div>\n        <div className=\"projects\">\n          {this.renderProjects()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Workspace;\n","import React from 'react';\nimport \"./EnterApiKey.css\";\n\nclass EnterApiKey extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.onEnter(this.state.value);\n  }\n\n  render() {\n    return (\n      <form className={\"EnterApiKey\"} onSubmit={this.handleSubmit}>\n        <label>\n          <p>Please enter your Clockify API Key:</p>\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder={\"API Key\"} />\n          <p className={\"right\"}><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://clockify.me/user/settings\">Get it here.</a></p>\n        </label>\n        <input className={\"submit\"} type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default EnterApiKey;\n","import React from 'react';\nimport './App.css';\nimport Workspace from \"../Workspace/Workspace\";\nimport EnterApiKey from \"../EnterApiKey/EnterApiKey\";\nimport {getWorkspaces, setApiToken} from \"../Clockify\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      workspaces: [],\n      apiToken: localStorage.getItem('ClockifyApiToken'),\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.apiToken) {\n      this.onEnterApiKey(this.state.apiToken);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  onEnterApiKey(token) {\n    setApiToken(token)\n      .then(() => {\n        localStorage.setItem('ClockifyApiToken', token);\n        this.setState({\n          apiToken: token,\n        });\n        this.loadWorkspaces();\n        this.interval = setInterval(() => this.loadWorkspaces(), 10*60*1000);\n      })\n      .catch(() => {});\n  }\n\n  loadWorkspaces() {\n    return getWorkspaces()\n      .then((workspaces) => {\n        this.setState({workspaces: workspaces});\n        return workspaces;\n      });\n  }\n\n  logout() {\n    localStorage.removeItem('ClockifyApiToken');\n    window.location.reload();\n  }\n\n  renderSpaces() {\n    return this.state.workspaces.map((workspace) => {\n      return <Workspace key={workspace.id} workspace={workspace} />\n    });\n  }\n\n  render() {\n    const logout = <button className=\"App-logout\" onClick={this.logout}>Logout</button>;\n\n    const input = (\n      <EnterApiKey onEnter={(token) => this.onEnterApiKey(token)}/>\n    );\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Clockify Switch</h1>\n\n          {this.state.apiToken ? [this.renderSpaces(), logout] : input}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}